#!/usr/bin/perl
use 5.010;
use strict;
use warnings;
use autodie;
use FindBin qw($Bin);
use JSON::PP;
use Tie::IxHash;

# Write various version things for ProceduralParts.
# Paul Fenwick, January 2015.
# This code is CC-0 licensed. You can use it for anything, without attribution.

# This requires JSON::PP to run, which comes with Perl since v5.14, or can be
# installed with `cpanm JSON::PP`.

my $VERSION_FILE      = "GameData/ProceduralParts/ProceduralParts.version";
my $ASSEMBLY_TEMPLATE = "Source/Properties/AssemblyInfo.in";
my $ASSEMBLY_FILE     = "Source/Properties/AssemblyInfo.cs";

# Fix the interface of Tie::IxHash to preserve key order
sub tied_hash_ref {
    tie(my %hash, 'Tie::IxHash', @_);
    return \%hash;
}

# Here's our base metadata. We'll add VERSION info to this before outputting.
my $metadata = tied_hash_ref(
    NAME => "Procedural Parts",
    URL  => "https://raw.githubusercontent.com/KSP-RO/ProceduralParts/master/GameData/ProceduralParts/ProceduralParts.version",
	DOWNLOAD => "https://github.com/KSP-RO/ProceduralParts/releases",
	GITHUB => tied_hash_ref(
		USERNAME   => "KSP-RO",
		REPOSITORY => "ProceduralParts",
        ALLOW_PRE_RELEASE => JSON::PP::false,
    ),
    VERSION => tied_hash_ref(),
    KSP_VERSION => tied_hash_ref(
        MAJOR => 1,
        MINOR => 8,
        PATCH => 1
    ),
    KSP_VERSION_MIN => tied_hash_ref(
        MAJOR => 1,
        MINOR => 8,
        PATCH => 1
	),
    KSP_VERSION_MAX => tied_hash_ref(
        MAJOR => 1,
        MINOR => 12,
        PATCH => 99
    ),
);

chdir($Bin);

my $version = `git describe --tags --long --match "v*"`;
chomp($version);

if ($version !~ m{
    # Parse a version in the form v1.2.3-4
    ^v
    (?<major>\d+)\.
    (?<minor>\d+)\.
    (?<patch>\d+)
	(-pre)?-
    (?<build>\d+)
}x) {
    die "Cannot parse $version as a version!";
}

my $assembly_version = "$+{major}.$+{minor}.$+{patch}.$+{build}";
my $assembly_version_major = "$+{major}";
my $assembly_version_minor = "$+{minor}";
my $assembly_version_major_first = "$+{major}.0.0.0";

say "Writing metadata for version $assembly_version";

# Using `int` below forces Perl to internally represent these as numbers,
# even though they were the result of a string operation. This means no
# unsightly quotes in the output JSON.
$metadata->{VERSION} = tied_hash_ref(
    MAJOR => int $+{major},
    MINOR => int $+{minor},
    PATCH => int $+{patch},
    # If used, AVC could try to get the user to
    # install git builds, which we don't want.
    BUILD => 0
);

# Write our AVC metadata
open(my $version_fh, '>', $VERSION_FILE);
print {$version_fh} JSON::PP->new->indent->indent_length(4)->space_after->encode( $metadata );
close $version_fh;

# Write our AssemblyInfo
open(my $template_fh, '<', $ASSEMBLY_TEMPLATE);
open(my $assembly_fh, '>', $ASSEMBLY_FILE);

while (<$template_fh>) {
    s{\@VERSION\@}{$assembly_version};
    s{\@VERSION_MAJOR_FIRST\@}{$assembly_version_major_first};
    s{\@VERSION_MAJOR\@}{$assembly_version_major};
    s{\@VERSION_MINOR\@}{$assembly_version_minor};
    print {$assembly_fh} $_;
}

close($template_fh);
close($assembly_fh);
